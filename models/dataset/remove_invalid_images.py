import os
from PIL import Image
import imghdr

VALID_FORMATS = {"jpeg", "png", "bmp", "gif"}
DATASET_PATH = "dataset/dataset_distract"

bad_files = []

for root, dirs, files in os.walk(DATASET_PATH):
    for file in files:
        file_path = os.path.join(root, file)

        # B·ªè qua file 0 byte
        if os.path.getsize(file_path) < 1024:
            print(f"‚ùå File qu√° nh·ªè ho·∫∑c r·ªóng: {file_path}")
            bad_files.append(file_path)
            continue

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng th·ª±c t·∫ø b·∫±ng imghdr
        format_detected = imghdr.what(file_path)
        if format_detected not in VALID_FORMATS:
            print(f"‚ùå Kh√¥ng ph·∫£i ·∫£nh h·ª£p l·ªá (th·ª±c t·∫ø l√† {format_detected}): {file_path}")
            bad_files.append(file_path)
            continue

        # C·ªë g·∫Øng m·ªü ·∫£nh b·∫±ng PIL
        try:
            with Image.open(file_path) as img:
                img.convert("RGB")
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc ·∫£nh b·∫±ng PIL: {file_path} ‚Üí {e}")
            bad_files.append(file_path)

print(f"\nüßπ T·ªïng s·ªë file l·ªói/ph√°t hi·ªán tr√° h√¨nh: {len(bad_files)}")

if bad_files:
    confirm = input("B·∫°n c√≥ mu·ªën xo√° to√†n b·ªô ·∫£nh l·ªói n√†y kh√¥ng? (y/n): ")
    if confirm.lower() == "y":
        for f in bad_files:
            try:
                os.remove(f)
                print(f"üóëÔ∏è ƒê√£ xo√°: {f}")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ xo√°: {f} ‚Üí {e}")
    else:
        print("‚ùå ƒê√£ hu·ª∑ xo√°.")
else:
    print("‚úÖ Kh√¥ng ph√°t hi·ªán ·∫£nh tr√° h√¨nh.")
